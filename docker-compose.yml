version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rephelper-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=rephelper
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=chave_segura_para_desenvolvimento_local
      - JWT_EXPIRES_IN=604800000
    depends_on:
      - postgres
    labels:
      - "coroot.scrape=true"
      - "coroot.scrape.port=8080"

  postgres:
    image: postgres:16-alpine
    container_name: rephelper-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rephelper
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "coroot.scrape=true"
      - "coroot.scrape.port=5432"

  coroot:
    image: coroot/coroot
    container_name: rephelper-coroot
    restart: unless-stopped
    ports:
      - "${PORT:-8081}:8080"
    volumes:
      - coroot_data:/var/lib/coroot
    environment:
      - COROOT_PROJECT_NAME=rephelper
      - COROOT_PROMETHEUS_URL=http://prometheus:9090
      - COROOT_LISTEN_ADDRESS=0.0.0.0:8080
      - COROOT_PUBLIC_URL=https://${RAILWAY_STATIC_URL}
    depends_on:
      - prometheus

  prometheus:
    image: prom/prometheus:latest
    container_name: rephelper-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.listen-address=0.0.0.0:9090'

volumes:
  postgres_data:
  coroot_data:
  prometheus_data: 